{"version":3,"sources":["App.jsx","index.jsx"],"names":["boardBuilder","boardSize","state","numRed","numBlue","winMessage","lineCoordinates","boxColors","i","j","k","boardSizes","size","text","getRandomPlayerTurn","turns","Math","floor","random","length","BoardRows","children","props","BoardElement","App","string","useState","currentBoardSize","setCurrentBoardSize","board","setBoard","currentTurn","setcurrentTurn","checkSquare","abs","parseFloat","fillLine","e","currentCoord","target","dataset","coord","style","backgroundColor","prevBoard","splitCoord","split","madeSquare","boxBgColor","prevBorad","tint","untint","selectColor","int","className","map","idx","onClick","window","confirm","charAt","toUpperCase","slice","cols","rows","elementId","push","data-coord","onMouseEnter","onMouseLeave","makeBoard","ceil","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a31a1e73.chunk.js","sourcesContent":["import { useState } from 'react'\n\nconst boardBuilder = boardSize => {\n\tconst state = {\n\t\tboardSize,\n\t\tnumRed: 0,\n\t\tnumBlue: 0,\n\t\t// nextTurn: 'red',\n\t\twinMessage: '',\n\t\tlineCoordinates: {},\n\t\tboxColors: {},\n\t}\n\n\tfor (let i = 0; i < 2; i++) {\n\t\tfor (let j = 0; j < state.boardSize + 1; j++) {\n\t\t\tfor (let k = 0; k < state.boardSize; k++) {\n\t\t\t\tstate.lineCoordinates[`${i},${j},${k}`] = 0\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (let i = 0; i < state.boardSize; i++) {\n\t\tfor (let j = 0; j < state.boardSize; j++) {\n\t\t\tstate.boxColors[`${i},${j}`] = 'white'\n\t\t}\n\t}\n\n\treturn state\n}\n\nconst boardSizes = [\n\t{ size: 5, text: '5x5' },\n\t{ size: 10, text: '10x10' },\n\t{ size: 15, text: '15x15' },\n]\n\nconst getRandomPlayerTurn = () => {\n\tconst turns = ['red', 'blue']\n\treturn turns[Math.floor(Math.random() * turns.length)]\n}\n\nconst capitalize = string => string.charAt(0).toUpperCase() + string.slice(1)\n\nconst BoardRows = ({ children, ...props }) => (\n\t<div {...props} children={children} />\n)\n\nconst BoardElement = ({ ...props }) => <div {...props} />\n\nconst App = () => {\n\tconst [currentBoardSize, setCurrentBoardSize] = useState(boardSizes[0].size)\n\tconst [board, setBoard] = useState(boardBuilder(currentBoardSize))\n\tconst [currentTurn, setcurrentTurn] = useState(getRandomPlayerTurn())\n\n\tconst changeBoardSize = boardSize => {\n\t\tif (window.confirm('Are you sure you would like to start a new game?')) {\n\t\t\tsetCurrentBoardSize(boardSize)\n\t\t\tsetBoard(boardBuilder(boardSize))\n\t\t\tsetcurrentTurn(getRandomPlayerTurn())\n\t\t}\n\t}\n\n\tconst makeWinMessage = state => {\n\t\treturn state.numRed > state.numBlue\n\t\t\t? 'Red wins! Select a board size to start a new game.'\n\t\t\t: state.numRed < state.numBlue\n\t\t\t? 'Blue wins! Select a board size to start a new game.'\n\t\t\t: 'Draw! Select a board size to start a new game.'\n\t}\n\n\tconst checkGameOver = () => {\n\t\tsetBoard(prevBorad => ({\n\t\t\t...prevBorad,\n\t\t\twinMessage:\n\t\t\t\tprevBorad.numRed + prevBorad.numBlue === prevBorad.boardSize ** 2 ||\n\t\t\t\tprevBorad.numRed > prevBorad.boardSize ** 2 / 2 ||\n\t\t\t\tprevBorad.numBlue > prevBorad.boardSize ** 2 / 2\n\t\t\t\t\t? makeWinMessage(prevBorad)\n\t\t\t\t\t: '',\n\t\t}))\n\t}\n\n\tconst checkSquare = (j, k) => {\n\t\tconst checker1 = Math.abs(board.lineCoordinates[`0,${j},${k}`])\n\t\tconst checker2 = Math.abs(\n\t\t\tparseFloat(j) + 1 > board.boardSize\n\t\t\t\t? 0\n\t\t\t\t: board.lineCoordinates[`0,${parseFloat(j) + 1},${k}`]\n\t\t)\n\t\tconst checker3 = Math.abs(board.lineCoordinates[`1,${k},${j}`])\n\t\tconst checker4 = Math.abs(\n\t\t\tparseFloat(k) + 1 > board.boardSize\n\t\t\t\t? 0\n\t\t\t\t: board.lineCoordinates[`1,${parseFloat(k) + 1},${j}`]\n\t\t)\n\n\t\treturn checker1 + checker2 + checker3 + checker4\n\t}\n\n\tconst fillLine = e => {\n\t\tconst currentCoord = e.target.dataset.coord\n\n\t\tif (board.lineCoordinates[currentCoord] === 0) {\n\t\t\te.target.style.backgroundColor = currentTurn\n\t\t\tconst lineCoordinates = board.lineCoordinates\n\t\t\tlineCoordinates[currentCoord] = currentTurn === 'red' ? 1 : -1\n\t\t\tsetBoard(prevBoard => ({ ...prevBoard, lineCoordinates }))\n\n\t\t\tconst splitCoord = currentCoord.split(',')\n\t\t\tconst i = splitCoord[0]\n\t\t\tconst j = splitCoord[1]\n\t\t\tconst k = splitCoord[2]\n\n\t\t\tlet boxColors = board.boxColors\n\t\t\tlet madeSquare = 0\n\n\t\t\tconst boxBgColor = currentTurn === 'red' ? 'lightpink' : 'lightblue'\n\n\t\t\tif (i === '0') {\n\t\t\t\tif (checkSquare(j, k) === 4) {\n\t\t\t\t\tmadeSquare = 1\n\t\t\t\t\tboxColors[`${j},${k}`] = boxBgColor\n\t\t\t\t\tsetBoard(prevBoard => ({\n\t\t\t\t\t\t...prevBoard,\n\t\t\t\t\t\tboxColors,\n\t\t\t\t\t\tnumBlue:\n\t\t\t\t\t\t\tcurrentTurn === 'blue'\n\t\t\t\t\t\t\t\t? prevBoard.numBlue + 1\n\t\t\t\t\t\t\t\t: prevBoard.numBlue,\n\t\t\t\t\t\tnumRed:\n\t\t\t\t\t\t\tcurrentTurn === 'red' ? prevBoard.numRed + 1 : prevBoard.numRed,\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t\tif (checkSquare(parseFloat(j) - 1, k) === 4) {\n\t\t\t\t\tmadeSquare = 1\n\t\t\t\t\tboxColors[`${parseFloat(j) - 1},${k}`] = boxBgColor\n\t\t\t\t\tsetBoard(prevBoard => ({\n\t\t\t\t\t\t...prevBoard,\n\t\t\t\t\t\tboxColors,\n\t\t\t\t\t\tnumBlue:\n\t\t\t\t\t\t\tcurrentTurn === 'blue'\n\t\t\t\t\t\t\t\t? prevBoard.numBlue + 1\n\t\t\t\t\t\t\t\t: prevBoard.numBlue,\n\t\t\t\t\t\tnumRed:\n\t\t\t\t\t\t\tcurrentTurn === 'red' ? prevBoard.numRed + 1 : prevBoard.numRed,\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (checkSquare(k, j) === 4) {\n\t\t\t\t\tmadeSquare = 1\n\t\t\t\t\tboxColors[`${k},${j}`] = boxBgColor\n\t\t\t\t\tsetBoard(prevBoard => ({\n\t\t\t\t\t\t...prevBoard,\n\t\t\t\t\t\tboxColors,\n\t\t\t\t\t\tnumBlue:\n\t\t\t\t\t\t\tcurrentTurn === 'blue'\n\t\t\t\t\t\t\t\t? prevBoard.numBlue + 1\n\t\t\t\t\t\t\t\t: prevBoard.numBlue,\n\t\t\t\t\t\tnumRed:\n\t\t\t\t\t\t\tcurrentTurn === 'red' ? prevBoard.numRed + 1 : prevBoard.numRed,\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t\tif (checkSquare(k, parseFloat(j) - 1) === 4) {\n\t\t\t\t\tmadeSquare = 1\n\t\t\t\t\tboxColors[`${k},${parseFloat(j) - 1}`] = boxBgColor\n\t\t\t\t\tsetBoard(prevBoard => ({\n\t\t\t\t\t\t...prevBoard,\n\t\t\t\t\t\tboxColors,\n\t\t\t\t\t\tnumBlue:\n\t\t\t\t\t\t\tcurrentTurn === 'blue'\n\t\t\t\t\t\t\t\t? prevBoard.numBlue + 1\n\t\t\t\t\t\t\t\t: prevBoard.numBlue,\n\t\t\t\t\t\tnumRed:\n\t\t\t\t\t\t\tcurrentTurn === 'red' ? prevBoard.numRed + 1 : prevBoard.numRed,\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (madeSquare === 0) {\n\t\t\t\tconst nextTurn = currentTurn === 'red' ? 'blue' : 'red'\n\t\t\t\tsetcurrentTurn(nextTurn)\n\t\t\t} else {\n\t\t\t\tcheckGameOver()\n\t\t\t}\n\t\t}\n\t}\n\n\tconst tint = e => {\n\t\tconst currentCoord = e.target.dataset.coord\n\t\tif (board.lineCoordinates[currentCoord] === 0) {\n\t\t\te.target.style.backgroundColor = currentTurn === 'red' ? 'red' : 'blue'\n\t\t}\n\t}\n\n\tconst untint = e => {\n\t\tconst currentCoord = e.target.dataset.coord\n\t\tif (board.lineCoordinates[currentCoord] === 0) {\n\t\t\te.target.style.backgroundColor = 'white'\n\t\t}\n\t}\n\n\tconst selectColor = int => {\n\t\tswitch (int) {\n\t\t\tcase 1:\n\t\t\t\treturn 'red'\n\t\t\tcase -1:\n\t\t\t\treturn 'blue'\n\t\t\tdefault:\n\t\t\t\treturn 'white'\n\t\t}\n\t}\n\n\tconst makeBoard = boardSize => {\n\t\tconst cols = []\n\t\tfor (let i = 0; i <= 2 * boardSize; i++) {\n\t\t\tconst rows = []\n\t\t\tfor (let j = 0; j <= 2 * boardSize; j++) {\n\t\t\t\tlet elementId\n\t\t\t\tif (i % 2 === 0) {\n\t\t\t\t\tif (j % 2 === 0) {\n\t\t\t\t\t\telementId = `dot${Math.floor(i / 2)},${Math.floor(j / 2)}`\n\t\t\t\t\t\trows.push(<BoardElement key={elementId} className='dot' />)\n\t\t\t\t\t} else {\n\t\t\t\t\t\telementId = `0,${Math.floor(i / 2)},${Math.floor(j / 2)}`\n\t\t\t\t\t\trows.push(\n\t\t\t\t\t\t\t<BoardElement\n\t\t\t\t\t\t\t\tkey={elementId}\n\t\t\t\t\t\t\t\tdata-coord={elementId}\n\t\t\t\t\t\t\t\tclassName='horizontalLine'\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tbackgroundColor: selectColor(\n\t\t\t\t\t\t\t\t\t\tboard.lineCoordinates[elementId]\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonClick={fillLine}\n\t\t\t\t\t\t\t\tonMouseEnter={tint}\n\t\t\t\t\t\t\t\tonMouseLeave={untint}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (j % 2 === 0) {\n\t\t\t\t\t\telementId = `1,${Math.floor(j / 2)},${Math.floor(i / 2)}`\n\t\t\t\t\t\trows.push(\n\t\t\t\t\t\t\t<BoardElement\n\t\t\t\t\t\t\t\tkey={elementId}\n\t\t\t\t\t\t\t\tdata-coord={elementId}\n\t\t\t\t\t\t\t\tclassName='verticalLine'\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tbackgroundColor: selectColor(\n\t\t\t\t\t\t\t\t\t\tboard.lineCoordinates[elementId]\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonClick={fillLine}\n\t\t\t\t\t\t\t\tonMouseEnter={tint}\n\t\t\t\t\t\t\t\tonMouseLeave={untint}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\t\t\t} else {\n\t\t\t\t\t\telementId = `box${Math.floor(i / 2)},${Math.floor(j / 2)}`\n\t\t\t\t\t\trows.push(\n\t\t\t\t\t\t\t<BoardElement\n\t\t\t\t\t\t\t\tkey={elementId}\n\t\t\t\t\t\t\t\tclassName='box'\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tbackgroundColor:\n\t\t\t\t\t\t\t\t\t\tboard.boxColors[\n\t\t\t\t\t\t\t\t\t\t\t`${Math.floor(i / 2)},${Math.floor(j / 2)}`\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcols.push(<BoardRows key={i} className='row' children={rows} />)\n\t\t}\n\n\t\treturn <div key='game-board' children={cols} />\n\t}\n\n\treturn (\n\t\t<div className='conatiner'>\n\t\t\t<header>\n\t\t\t\t<h1>Dots &amp; Boxes</h1>\n\t\t\t\t<div className='flex-container'>\n\t\t\t\t\t<span className='flex-item'>Board size:</span>\n\t\t\t\t\t{boardSizes.map(({ size, text }, idx) => (\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\t\tclassName={`flex-item ${\n\t\t\t\t\t\t\t\tcurrentBoardSize === size ? 'selected' : ''\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\tonClick={() => changeBoardSize(size)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{text}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t))}\n\t\t\t\t\t<div className='flex-item'>Player&apos;s Score:</div>\n\t\t\t\t\t<div className='flex-item red'>{board.numRed}</div>\n\t\t\t\t\t<div className='flex-item blue'>{board.numBlue}</div>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t\t<div className='message'>\n\t\t\t\t{board.winMessage\n\t\t\t\t\t? board.winMessage\n\t\t\t\t\t: `${capitalize(currentTurn)}'s turn`}\n\t\t\t</div>\n\t\t\t<div className='board'>{makeBoard(currentBoardSize)}</div>\n\t\t\t<div className='min-score-txt'>Board min. score to win: {Math.ceil((board.boardSize ** 2) / 2)}</div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n"],"sourceRoot":""}